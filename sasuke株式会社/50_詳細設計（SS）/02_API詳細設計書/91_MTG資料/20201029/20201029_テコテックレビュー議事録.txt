2020/10/29 テコテックSSレビュー

■帳表設計

帳表の作成日について、DBに保存する日付と一致する必要がある。（石井）
→承知しました。（テコ　城市）


データ出力元の担保が取れない。（石井）

answered:
回答者が解凍したかどうかを判断する要素っぽい。



・申込完了APIのところが未決事項が多い。（テコ　川人）

・ステータス同期
→査定結果情報のマッピングはまだ未決事項

・メール送信バッチ
→パターンがほしい
→メール設計書をサスケ側でアップデートする（サスケ　宿題）



・プランの設計期間が重い。CSVの解析に時間がかかりそう。（テコ　川人）
・主契約、特約の分け方の解析ロジックとか
→何度も解析するのが億劫

・プラン内容を解析する処理がある（石井さん検討中）

・何かしらのキー・バリューですぐに検索できるようにしたほうがいいのではないか。

・DBに持ってもいいし、Redisにもってもいい。
→検討しましょう（★サスケ　宿題）
→Redisにします（決定）
→その想定で設計します（テコ　川人）
→明日までに仕上げて明日レビューすれば間に合う（テコ　川人）

保険料計算API　11/5,6

今後の日程は明日見てもらってから判断ということで（テコ　川人）
→ステータス系、バッチ系も明日判断？（石井）
→未決でいいということなので大丈夫という認識（テコ　川人）

保険料計算APIは明日のレビュー結果によって判断。


■エラーレスポンスについて（テコ　川人）
エラーの中身を大項目、詳細という形にするのはどうか。

詳細は「errors」の中に記載していく。

大項目のerrorCodeの意味が希薄になってしまうのでは？
httpステータスとニアリーイコールなのではないか。

http大項目
errorCode中項目
erros小項目

ご提案いただいた内容で進めていただければ良いと思います。（石井）


参照系：必須チェックのみ
更新系：必須項目チェック、その他

画面設計書のバリデーションと合わせる必要はあるか？
日本国内にいる人じゃないと成り立たない。


固定電話・携帯電話の区分で厳密にチェックしたほうがいいか？（テコ　川人）
→そこまではいらない認識（石井）

日付系と日時系のチェックは分けてください。（石井）
→承知しました。（テコ　川人）


■バッチについて
スクリプトとして実行予定exitコード（0, 1）とする？
→部分終了と完全な終了ということで、1, 2を検討していた。


・ステータス同期
基幹系エラーは基幹系の状況を確認の上、再実行もしくは次回

基幹系エラーについては、発砲を別にしたい。基幹系エラーについては基幹系のエラーであることを分かるような仕組みを検討できますか？（石井）
→exitコードを増やすか、ログを見てもらえれば基幹エラーかどうかは分かる。
→基幹系のエラーが発生した場合、サスケではなくNITに送らないと意味がない
→cloud Watchの機能でerrorCodeをみて判断できるのではないか？（テコ　川人）

このあたりの質問はサスケインフラT？

・IP制限について
X-Forwarded-Forを見るで本当に正しい？
CRM -> ALB -> ECS

X-Forwarded-ForにはCRMのIPが入る。
→想定ではALBのIPアドレスも取れる想定でした（石井）
→そのIPが取れない気がします（テコ　川人）


リクエストのIPを取るとALBのIP、// X-Forwarded-ForだとCRM/ユーザーのIPがとれる

CRMからかユーザーからか（想定していた経路で来ているのかがとれればがよい

ALBはスケールされたりするのではないか？そうなってくるとIPが変わってしまう？（テコ　川人）
サブネット単位で判断したほうがいい？
→インフラと認識合わせしたほうがいいかも（サスケ　宿題）

認識合わせできる時間とか日程とかありますか？（石井）
→テコテックのインフラと相談した上で（テコ　川人）
→別途連絡する（テコ　川人）
















