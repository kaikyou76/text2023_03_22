SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Indexes */

DROP INDEX IDX_ACCEPTANCE_01 ON ACCEPTANCE;
DROP INDEX IDX_APPLY_01 ON APPLY;
DROP INDEX IDX_AUTHENTICATION_01 ON AUTHENTICATION;
DROP INDEX IDX_AUTHENTICATION_02 ON AUTHENTICATION;
DROP INDEX IDX_AUTHENTICATION_03 ON AUTHENTICATION;
DROP INDEX IDX_AUTH_HASH_01 ON AUTH_HASH;
DROP INDEX IDX_CODE_MASTER_01 ON CODE_MASTER;
DROP INDEX IDX_PASSWORD_01 ON PASSWORD;
DROP INDEX IDX_PAYMENT_01 ON PAYMENT;
DROP INDEX IDX_PLAN_FILE_01 ON PLAN_FILE;
DROP INDEX IDX_PRODUCT_ADDITIONAL_01 ON PRODUCT_ADDITIONAL;
DROP INDEX IDX_PRODUCT_ADDITIONAL_02 ON PRODUCT_ADDITIONAL;
DROP INDEX IDX_PRODUCT_ADDITIONAL_03 ON PRODUCT_ADDITIONAL;
DROP INDEX IDX_PRODUCT_ADDITIONAL_04 ON PRODUCT_ADDITIONAL;
DROP INDEX IDX_RIDER_01 ON RIDER;
DROP INDEX IDX_TEL_NUM_01 ON TEL_NUM;



/* Drop Tables */

DROP TABLE IF EXISTS ACCEPTANCE;
DROP TABLE IF EXISTS EXCLUSION;
DROP TABLE IF EXISTS ASSESSMENT;
DROP TABLE IF EXISTS RIDER;
DROP TABLE IF EXISTS BASE_POLICY;
DROP TABLE IF EXISTS DOCUMENT;
DROP TABLE IF EXISTS FLAW;
DROP TABLE IF EXISTS JUDGEMENT;
DROP TABLE IF EXISTS PAYMENT;
DROP TABLE IF EXISTS CONTACT;
DROP TABLE IF EXISTS TOPIC_CATEGORY;
DROP TABLE IF EXISTS TOPIC;
DROP TABLE IF EXISTS PRODUCT_ADDITIONAL;
DROP TABLE IF EXISTS APPLY;
DROP TABLE IF EXISTS AUTH_HASH;
DROP TABLE IF EXISTS PASSWORD;
DROP TABLE IF EXISTS AUTHENTICATION;
DROP TABLE IF EXISTS ACCOUNT;
DROP TABLE IF EXISTS ANNOUNCE;
DROP TABLE IF EXISTS CODE_MASTER;
DROP TABLE IF EXISTS TEL_NUM;
DROP TABLE IF EXISTS INDIVIDUAL;
DROP TABLE IF EXISTS OPERATOR_AUTH_HASH;
DROP TABLE IF EXISTS OPERATOR_PASSWORD;
DROP TABLE IF EXISTS OPERATOR;
DROP TABLE IF EXISTS PLAN_FILE;
DROP TABLE IF EXISTS PLAN_MASTER;




/* Create Tables */

CREATE TABLE ACCEPTANCE
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	ACCEPTANCE_TARGET_CODE varchar(5) NOT NULL,
	ACCEPTANCE_DATETIME datetime NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION, ACCEPTANCE_TARGET_CODE)
);


CREATE TABLE ACCOUNT
(
	ACCOUNT_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	INDIVIDUAL_ID int(15) unsigned NOT NULL,
	WANNA_DISCONNECT boolean DEFAULT FALSE NOT NULL,
	REGISTERED_DATETIME datetime NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ACCOUNT_ID)
);


CREATE TABLE ANNOUNCE
(
	ANNOUNCE_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	SUBJECT varchar(100) NOT NULL,
	CONTENT varchar(1000) NOT NULL,
	LINK_URL varchar(100),
	START_DATETIME datetime NOT NULL,
	END_DATETIME datetime NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ANNOUNCE_ID)
);


CREATE TABLE APPLY
(
	APPLY_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	APPLY_DATETIME datetime,
	ACCOUNT_ID int(15) unsigned NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (APPLY_ID)
);


CREATE TABLE ASSESSMENT
(
	ASSESSMENT_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	POLICY_NO varchar(11),
	AURA_PRODUCT_CD varchar(20),
	STANDARD_PROVISION_CD varchar(3),
	APPLIED_PROVISION_CD varchar(3),
	APPLIED_PROVISION_VERSION varchar(3),
	DECISION_CD varchar(2) COMMENT '"01"（無条件）／"02"（特別条件）／"03"（引受不可）／"05"（制限）／"06"（特別条件・制限）',
	FREE_OF_P_RIDER_FLG varchar(1) COMMENT '"1"（付加する）／"0"（付加しない）',
	FREE_OF_PREMIUM_RIDER_CLS varchar(3) COMMENT '"000"（特約付加無し）／"001"（３大疾病保険料払込免除特約）／"011"（上皮内がん保障あり型）／"012"（上皮内がん保障なし型）／"021"（特定８疾病・臓器移植Ⅰ型）／"022"（特定８疾病・臓器移植Ⅱ型）／"031"（３大疾病Ⅰ型）／"032"（３大疾病Ⅱ型）',
	DISEASE_COVERAGE_TYPE varchar(1) COMMENT '"1"（特定８疾病・臓器移植保障型）／"2"（３大疾病保障型）／"3"（がん保障型）／"4"（特定８疾病・臓器移植Ⅰ型）／"5"（特定８疾病・臓器移植Ⅱ型）／"6"（３大疾病Ⅰ型）／"7"（３大疾病Ⅱ型）',
	AMOUNT_RESTRICTION varchar(120),
	AMOUNT_RESTRICTION10K varchar(120),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ASSESSMENT_ID)
);


CREATE TABLE AUTHENTICATION
(
	ACCOUNT_ID int(15) unsigned NOT NULL,
	MAILADDRESS varchar(70) NOT NULL,
	EXT_AUTH_CODE int(5) unsigned COMMENT '1:docomo
2:Line
3:Yahoo',
	EXT_AUTH_ID varchar(100) COMMENT 'Line:user_id',
	LAST_LOGIN_DATETIME datetime,
	LOGIN_TRIAL_TIMES int unsigned NOT NULL,
	CREATED_DATETIME datetime NOT NULL COMMENT 'レコード作成時の日時',
	ACTIVATED_DATETIME datetime,
	MAILADDRESS_CANDIDATE varchar(70) COMMENT 'メールアドレス変更時に適用される対象。
オペレーションまでは旧アドレスを使用するため、一時的に保存。
認証ハッシュテーブルに存在すべきでないと思うため、別途リファクタリングを行う。',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ACCOUNT_ID)
);


CREATE TABLE AUTH_HASH
(
	HASH_CODE varchar(500) NOT NULL,
	HASH_USAGE_CODE int(5) unsigned NOT NULL,
	EXPIRATION_DATETIME datetime NOT NULL,
	ACCOUNT_ID int(15) unsigned NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (HASH_CODE)
);


CREATE TABLE BASE_POLICY
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	SELECTABLE_FLG boolean DEFAULT FALSE,
	STANDARD_PROVISION_CD varchar(3),
	APPLIED_PROVISION_CD varchar(3),
	APPLIED_PROVISION_VERSION varchar(3),
	PROVISION_NAME varchar(50),
	BENEFIT_FIRST_PAY_CONV_CLS varchar(1),
	BENEFIT_FIRST_PAY_CONV_CLS_NAME_LABEL varchar(30),
	BENEFIT_FIRST_PAY_CONV_CLS_UNIT_LABEL varchar(20),
	INSURANCE_PERIOD_CLASS varchar(1),
	INSURANCE_PERIOD varchar(5),
	INSURANCE_PERIOD_NAME_LABEL varchar(30),
	INSURANCE_PERIOD_UNIT_LABEL varchar(20),
	BENEFIT varchar(14),
	BENEFIT_NAME_LABEL varchar(30),
	BENEFIT_UNIT_LABEL varchar(20),
	PAYMENT_PERIOD_CLASS varchar(1),
	PAYMENT_PERIOD varchar(5),
	PAYMENT_PERIOD_NAME_LABEL varchar(30),
	PAYMENT_PERIOD_UNIT_LABEL varchar(20),
	PAYMENT_METHOD varchar(5),
	PAYMENT_CHANNEL varchar(1) COMMENT '"2"：口座振替／"3"：クレカ払',
	PREMIUM varchar(9),
	RISK_SELECTION_METHOD varchar(2),
	LIVING_NEEDS_RIDER varchar(1),
	LIVING_NEEDS_RIDER_NAME_LABEL varchar(30),
	LIVING_NEEDS_RIDER_UNIT_LABEL varchar(20),
	HOS_COV_PAY_LIMIT_CLASS varchar(3),
	HOS_COV_PAY_LIMIT_CLASS_NAME_LABEL varchar(30),
	HOS_COV_PAY_LIMIT_CLASS_UNIT_LABEL varchar(20),
	BENEFIT_PAY_CONV_CLS varchar(1),
	BENEFIT_PAY_CONV_CLS_NAME_LABEL varchar(30),
	BENEFIT_PAY_CONV_CLS_UNIT_LABEL varchar(20),
	DIS_HSPT_UNLMT_DAYS_SP_PRV varchar(1),
	DIS_HSPT_UNLMT_DAYS_SP_PRV_NAME_LABEL varchar(30),
	DIS_HSPT_UNLMT_DAYS_SP_PRV_UNIT_LABEL varchar(20),
	RECEIPT_DIVERSION_EXIST varchar(1),
	RECEIPT_DIVERSION_POLICY_NO varchar(11),
	DISEASE_COVERAGE_TYPE varchar(1) COMMENT '"1"（特定８疾病・臓器移植保障型）／"2"（３大疾病保障型）／"3"（がん保障型）／"4"（特定８疾病・臓器移植Ⅰ型）／"5"（特定８疾病・臓器移植Ⅱ型）／"6"（３大疾病Ⅰ型）／"7"（３大疾病Ⅱ型）',
	DISEASE_COVERAGE_TYPE_NAME_LABEL varchar(30),
	DISEASE_COVERAGE_TYPE_UNIT_LABEL varchar(20),
	FREE_OF_P_RIDER_FLG varchar(1) COMMENT '"1"（付加する）／"0"（付加しない）',
	FREE_OF_P_RIDER_NAME_LABEL varchar(30),
	FREE_OF_P_RIDER_UNIT_LABEL varchar(20),
	FREE_OF_PREMIUM_RIDER_CLS varchar(3) COMMENT '"000"（特約付加無し）／"001"（３大疾病保険料払込免除特約）／"011"（上皮内がん保障あり型）／"012"（上皮内がん保障なし型）／"021"（特定８疾病・臓器移植Ⅰ型）／"022"（特定８疾病・臓器移植Ⅱ型）／"031"（３大疾病Ⅰ型）／"032"（３大疾病Ⅱ型）',
	FREE_OF_PREMIUM_RIDER_CLS_NAME_LABEL varchar(30),
	FREE_OF_PREMIUM_RIDER_CLS_UNIT_LABEL varchar(20),
	PREPAY_KIND varchar(100) COMMENT 'ここは使用しないので値は適当に定義。使用することになったら改めて検討する',
	FIRST_PREPAY_FREQUENCY varchar(100) COMMENT 'ここは使用しないので値は適当に定義。使用することになったら改めて検討する',
	DOWN_PAYMENT_BENEFIT varchar(100) COMMENT 'ここは使用しないので値は適当に定義。使用することになったら改めて検討する',
	CURRENCY_KIND varchar(100) COMMENT 'ここは使用しないので値は適当に定義。使用することになったら改めて検討する',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
);


CREATE TABLE CODE_MASTER
(
	CODE_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	CODE varchar(10) NOT NULL,
	LOGICAL_NAME varchar(100),
	PHYSICAL_NAME varchar(100),
	IS_INT boolean DEFAULT FALSE NOT NULL COMMENT 'CODE値に数値型と文字列型が混在しているのをマークするためのカラム',
	PARENT_ID int(15) unsigned,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (CODE_ID)
);


CREATE TABLE CONTACT
(
	CONTACT_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	CONTACT_CODE varchar(5) NOT NULL COMMENT 'メールのみ/専用ページのみ/両方など掲載対象を管理する',
	MAIL_SUBJECT varchar(100),
	MAIL_CONTENT varchar(1000),
	MESSAGE_BOX_SUBJECT varchar(100),
	MESSAGE_BOX_CONTENT varchar(1000),
	RESPONSE varchar(1000),
	RESPONDED_DATETIME datetime,
	CREATED_DATETIME datetime NOT NULL COMMENT 'レコード作成時の日時',
	DISPLAYED_DATETIME datetime COMMENT '掲載フラグがONになったときの日時',
	WANT_DISPLAY boolean NOT NULL COMMENT '掲載の切り替えを管理する',
	MAIL_SEND_START_HOUR int unsigned NOT NULL COMMENT 'メール送信可能開始-終了時間に合致した時間帯にメールを送信する',
	MAIL_SEND_END_HOUR int unsigned NOT NULL COMMENT 'メール送信可能開始-終了時間に合致した時間帯にメールを送信する',
	MAIL_SEND_DATETIME datetime,
	MAILADDRESS varchar(70) NOT NULL,
	SEND_STATUS_CODE varchar(5) DEFAULT '0' NOT NULL COMMENT '未送信・送信中・送信済・ハードバウンスなどメール送信状況を管理する',
	SEND_SERVICE_CODE varchar(5) NOT NULL,
	SES_MESSAGE_ID varchar(100) COMMENT '暫定定義',
	TOPIC_ID int(15) unsigned NOT NULL,
	CRM_STAFF_NAME varchar(71) COMMENT 'CRM側で使用想定のカラムで、メール送信・メッセージBOX掲載内容を登録・更新した担当者の氏名。
書式は「姓＋全角スペース＋名」',
	CRM_APPROVER_NAME varchar(71) COMMENT 'CRM側で使用想定のカラムで、メール送信・メッセージBOX掲載を承認した承認者の氏名。
書式は「姓＋全角スペース＋名」',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (CONTACT_ID)
);


CREATE TABLE DOCUMENT
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	DOCUMENT_CODE varchar(5) NOT NULL,
	FILE_DATA mediumblob NOT NULL,
	CREATE_DATETIME datetime NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION, DOCUMENT_CODE)
);


CREATE TABLE EXCLUSION
(
	ASSESSMENT_ID int(15) unsigned NOT NULL,
	SERIAL_NUMBER int(15) unsigned NOT NULL COMMENT '親レコードに対する複数の子レコードを表現するための連番',
	EXCLUSION_CLASS_CD varchar(1),
	EXCLUSION_PART_CD varchar(2),
	EXCLUSION_PERIOD_CD varchar(3),
	EXCLUSION_SPARE_CD varchar(2),
	EXCLUSION_CLASS_NAME varchar(120),
	EXCLUSION_PERIOD_NAME varchar(120),
	EXCLUSION_PART_NAME varchar(120),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ASSESSMENT_ID, SERIAL_NUMBER)
);


CREATE TABLE FLAW
(
	JUDGEMENT_ID int(15) unsigned NOT NULL COMMENT '商品付加:審査=1:1で商品付加:査定=1:多だが、カージナリティを表現できないため、商品付加:査定に合わせて「審査ID」を追加している。',
	SERIAL_NUMBER int(15) unsigned NOT NULL COMMENT '親レコードに対する複数の子レコードを表現するための連番',
	FLAW_CODE varchar(5) COMMENT '"10100"から"11010"のコード値',
	FLAW_REASON varchar(50),
	FLAW_TYPE varchar(2) COMMENT '"01"：（新契約）申込書不備／"02"：（新契約）添付書類不備／"03"：（新契約）その他不備',
	FLAW_TYPE_NAME varchar(30),
	FLAW_INFO_FREE_TEXT varchar(2000),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (JUDGEMENT_ID, SERIAL_NUMBER)
);


CREATE TABLE INDIVIDUAL
(
	INDIVIDUAL_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	LAST_NAME varchar(35) NOT NULL,
	FIRST_NAME varchar(35) NOT NULL,
	LAST_NAME_KANA varchar(35) NOT NULL,
	FIRST_NAME_KANA varchar(35) NOT NULL,
	BIRTH_DATE date NOT NULL,
	SEX_CODE varchar(1) NOT NULL COMMENT '生物学上の男女のため2種類のみ
1:男性
2:女性',
	RELATIONSHIP_CODE varchar(2) NOT NULL,
	RELATIONSHIP_DETAIL varchar(10),
	ZIP_CODE varchar(7),
	PREFECTURES varchar(4),
	CITY varchar(11),
	BLOCK_STREET varchar(50),
	BUILDINGS varchar(35),
	JOB_CODE varchar(2) COMMENT '1:
2:
3:
...',
	JOB_SUB_CODE varchar(2),
	JOB_DETAIL_CODE varchar(2),
	OFFICE varchar(50),
	INCOME_CODE varchar(2) COMMENT '1:
2:
3:
...',
	MAILADDRESS varchar(70),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (INDIVIDUAL_ID)
);


CREATE TABLE JUDGEMENT
(
	JUDGEMENT_ID int(15) unsigned NOT NULL AUTO_INCREMENT COMMENT '商品付加:審査=1:1で商品付加:査定=1:多だが、カージナリティを表現できないため、商品付加:査定に合わせて「審査ID」を追加している。',
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	POLICY_NO varchar(11),
	PROCESS_NAME varchar(48) COMMENT '開始／申込書入力／申込書再査／健診入力／健診再査／内容点検／内容点検（書類到着待ち）／内容点検（内勤）／不備対応待ち／ＬＩＮＣ回答待ち／一次査定／二次査定／本人確認書類点検／条件付対応待ち／引受不可取消待ち／流用収納情報待ち／収納代行確認待ち／成立保留中／成立処理待ち／申込取消済／完了',
	CONTENT_INSPECTION varchar(12) COMMENT '回付する／回付する（書類到着待ち）／回付する（内勤）／""（ブランク）',
	INPUT_PROCESS varchar(7) COMMENT '申込書入力／健康診断書入力／""（ブランク）',
	APPLICATION_RESET_STATUS varchar(4) COMMENT '取消済／取消未済',
	APPLICATION_CHANGE_CLS varchar(2) COMMENT '新規／ 承諾／ 切替／ 取消',
	APPLICATION_DATA_KIND varchar(1) COMMENT 'ペーパーレス申込／ 機械作成申込',
	HAS_DISCLOSURE_ON_PAPER varchar(1) COMMENT '有／ 無',
	HAS_DISCLOSURE_DIVERSION varchar(2) COMMENT '有／ 無',
	NEED_INPUT_HEALTH_CERTIFICATE varchar(2) COMMENT '要／ 不要',
	CONTENT_INSPECTION_CLS varchar(4) COMMENT '確認要／確認不要',
	HAS_INADEQUANCY varchar(1) COMMENT '有／ 無',
	LINC_ANSWER_STATUS varchar(3) COMMENT '有／ 無／対象外／ ""（ブランク）',
	NEED_PRIMARY_ASSESSMENT varchar(2) COMMENT '要／ 不要／ ""（ブランク）',
	NEED_SECONDARY_ASSESSMENT varchar(2) COMMENT '要／ 不要',
	ASSESSMENT_STATUS varchar(14) COMMENT '未査定／査定済成立可／引受不可で成立不可／査定中成立不可／（顧客）交渉中・済で成立不可／主契約引受不可／料率相違で成立不可／ ""（ブランク）',
	SELF_VERIFICATION_DOCUMENT_ARRIVAL_STATUS varchar(1) COMMENT 'SPACE：対象外、"0"：未済、"1"：済',
	SELF_VERIFICATION_DOCUMENT_STATUS varchar(3) COMMENT '対象外／済／未済',
	RECEIPT_DIVERSION_REUSE_REGISTRATION_STATUS varchar(3) COMMENT '対象外／登録済／未登録',
	RECEIPT_AGENCY_COMPANY_PROCEDURE_STATUS varchar(3) COMMENT '未回答／回答済',
	SATISFIED_PENDING_STATUS varchar(3) COMMENT '保留有／ 保留無',
	SATISFIED_CLS varchar(3) COMMENT '成立済／未成立',
	NEW_CONTRACT_ORGANIZATION_CODE varchar(15),
	NEW_CONTRACT_COLLABORATOR_CODE varchar(15),
	NEW_CONTRACT_JOINT_ORGANIZATION_CODE varchar(15),
	NEW_CONTRACT_JOINT_COLLABORATOR_CODE varchar(15),
	SELF_LAST_NAME_KANA varchar(35),
	SELF_LAST_NAME varchar(35),
	SELF_BIRTH_DATE date,
	PAYMENT_CHANNEL varchar(1) COMMENT '"2"：口座振替／"3"：クレカ払',
	NOTE varchar(2000),
	UPDATE_DATETIME datetime,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (JUDGEMENT_ID)
);


CREATE TABLE OPERATOR
(
	OPERATOR_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	LAST_NAME varchar(35) NOT NULL,
	FIRST_NAME varchar(35) NOT NULL,
	MAILADDRESS varchar(70) NOT NULL,
	ACTIVATED_DATETIME datetime,
	ROLE_CODE int(5) unsigned NOT NULL,
	LOGIN_TRIAL_TIMES int unsigned NOT NULL,
	LAST_LOGIN_DATETIME datetime,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (OPERATOR_ID)
);


CREATE TABLE OPERATOR_AUTH_HASH
(
	HASH_CODE varchar(500) NOT NULL,
	HASH_USAGE_CODE int(5) unsigned NOT NULL,
	EXPIRATION_DATETIME datetime NOT NULL,
	OPERATOR_ID int(15) unsigned NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (HASH_CODE)
);


CREATE TABLE OPERATOR_PASSWORD
(
	OPERATOR_ID int(15) unsigned NOT NULL,
	PASSWORD varchar(60) NOT NULL,
	CREATED_DATETIME datetime NOT NULL COMMENT 'レコード作成時の日時',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (OPERATOR_ID, PASSWORD)
);


CREATE TABLE PASSWORD
(
	ACCOUNT_ID int(15) unsigned NOT NULL,
	PASSWORD varchar(60) NOT NULL,
	CREATED_DATETIME datetime NOT NULL COMMENT 'レコード作成時の日時',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (ACCOUNT_ID, PASSWORD)
);


CREATE TABLE PAYMENT
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	PAYMENT_CHANNEL_CODE int(5) unsigned,
	EXT_PAYMENT_ID varchar(100),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
);


CREATE TABLE PLAN_FILE
(
	PLAN_FILE_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	FILE_NAME varchar(30),
	FILE_DATA mediumblob NOT NULL,
	START_DATETIME datetime NOT NULL,
	END_DATETIME datetime NOT NULL,
	NOTE varchar(100),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PLAN_FILE_ID)
);


CREATE TABLE PLAN_MASTER
(
	PLAN_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	PRODUCT_CODE varchar(6) NOT NULL,
	PLAN_NO varchar(5) NOT NULL,
	PLAN_NAME varchar(50) NOT NULL,
	PLAN_DETAIL varchar(1000) NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PLAN_ID)
);


CREATE TABLE PRODUCT_ADDITIONAL
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	UPDATE_DATETIME datetime NOT NULL,
	PRODUCT_CODE varchar(6) NOT NULL,
	SALES_PRODUCT_NAME_LABEL varchar(30) NOT NULL,
	SALES_PRODUCT_PET_NAME_LABEL varchar(30) NOT NULL,
	CALC_BASE_DATE date,
	DISCLOSURED_DATE date,
	POLICY_NO varchar(11),
	ENCRYPTED_POLICY_NO varchar(32) COMMENT '基幹システムで暗号化した証券番号',
	RECEIPT_DIVERSION_POLICY_NO varchar(11),
	CONTRACT_SPECIAL_PROVISIONS varchar(1),
	POLICY_POST_CLS varchar(1),
	AGENCY_CODE varchar(6),
	UNSELECTABLE_CDS varchar(100),
	TRANSFER_STATUS_CODE int(5) unsigned NOT NULL,
	APPLY_CHANGE_TYPE varchar(2),
	JUDGEMENT_GET_DATETIME  datetime,
	EXPIRATION_DATETIME datetime NOT NULL,
	IS_CANCELED boolean NOT NULL,
	SELF_INDIVIDUAL_ID int(15) unsigned,
	RECEIVER_INDIVIDUAL_ID int(15) unsigned,
	APPLY_ID int(15) unsigned NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
);


CREATE TABLE RIDER
(
	PRODUCT_ADDITIONAL_ID int(15) unsigned NOT NULL,
	PRODUCT_ADDITIONAL_VERSION int unsigned NOT NULL COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	SERIAL_NUMBER int(15) unsigned NOT NULL AUTO_INCREMENT COMMENT '親レコードに対する複数の子レコードを表現するための連番',
	SELECTABLE_FLG boolean,
	STANDARD_PROVISION_CD varchar(3),
	APPLIED_PROVISION_CD varchar(3),
	APPLIED_PROVISION_VERSION varchar(3),
	PROVISION_NAME varchar(50),
	ADDITION_TYPE varchar(1),
	ADDITION_TYPE_NAME_LABEL varchar(30),
	ADDITION_TYPE_UNIT_LABEL varchar(20),
	DISEASE_COVERAGE_TYPE varchar(1) COMMENT '"1"（特定８疾病・臓器移植保障型）／"2"（３大疾病保障型）／"3"（がん保障型）／"4"（特定８疾病・臓器移植Ⅰ型）／"5"（特定８疾病・臓器移植Ⅱ型）／"6"（３大疾病Ⅰ型）／"7"（３大疾病Ⅱ型）',
	DISEASE_COVERAGE_TYPE_NAME_LABEL varchar(30),
	DISEASE_COVERAGE_TYPE_UNIT_LABEL varchar(20),
	FREE_OF_PREMIUM_RIDER_CLS varchar(3) COMMENT '"000"（特約付加無し）／"001"（３大疾病保険料払込免除特約）／"011"（上皮内がん保障あり型）／"012"（上皮内がん保障なし型）／"021"（特定８疾病・臓器移植Ⅰ型）／"022"（特定８疾病・臓器移植Ⅱ型）／"031"（３大疾病Ⅰ型）／"032"（３大疾病Ⅱ型）',
	FREE_OF_PREMIUM_RIDER_CLS_NAME_LABEL varchar(30),
	FREE_OF_PREMIUM_RIDER_CLS_UNIT_LABEL varchar(20),
	INSURANCE_PERIOD_CLASS varchar(1),
	INSURANCE_PERIOD varchar(5),
	INSURANCE_PERIOD_NAME_LABEL varchar(30),
	INSURANCE_PERIOD_UNIT_LABEL varchar(20),
	BENEFIT varchar(14),
	BENEFIT_NAME_LABEL varchar(30),
	BENEFIT_UNIT_LABEL varchar(20),
	PAYMENT_PERIOD_CLASS varchar(1),
	PAYMENT_PERIOD varchar(5),
	PAYMENT_PERIOD_NAME_LABEL varchar(30),
	PAYMENT_PERIOD_UNIT_LABEL varchar(20),
	PREMIUM varchar(9),
	HOS_COV_PAY_LIMIT_CLASS varchar(3),
	HOS_COV_PAY_LIMIT_CLASS_NAME_LABEL varchar(30),
	HOS_COV_PAY_LIMIT_CLASS_UNIT_LABEL varchar(20),
	BENEFIT_FIRST_PAY_CONV_CLS varchar(1),
	BENEFIT_FIRST_PAY_CONV_CLS_NAME_LABEL varchar(30),
	BENEFIT_FIRST_PAY_CONV_CLS_UNIT_LABEL varchar(20),
	DOWN_PAYMENT_BENEFIT varchar(100) COMMENT 'ここは使用しないので値は適当に定義。使用することになったら改めて検討する',
	RISK_SELECTION_METHOD varchar(2),
	DIS_HSPT_UNLMT_DAYS_SP_PRV varchar(1),
	DIS_HSPT_UNLMT_DAYS_SP_PRV_NAME_LABEL varchar(30),
	DIS_HSPT_UNLMT_DAYS_SP_PRV_UNIT_LABEL varchar(20),
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION, SERIAL_NUMBER)
);


CREATE TABLE TEL_NUM
(
	INDIVIDUAL_ID int(15) unsigned NOT NULL,
	TEL_NUM_TYPE varchar(5) NOT NULL COMMENT '1:携帯
2:自宅',
	TEL_NUM varchar(15) NOT NULL,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (INDIVIDUAL_ID, TEL_NUM_TYPE)
);


CREATE TABLE TOPIC
(
	TOPIC_ID int(15) unsigned NOT NULL AUTO_INCREMENT,
	PRODUCT_ADDITIONAL_ID int(15) unsigned,
	PRODUCT_ADDITIONAL_VERSION int unsigned COMMENT '商品情報のバーションを表す。
1:当初意向
2以降:申込・審査中の情報変更の際インクリメント',
	APPLY_ID int(15) unsigned,
	ACCOUNT_ID int(15) unsigned,
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (TOPIC_ID)
);


CREATE TABLE TOPIC_CATEGORY
(
	TOPIC_ID int(15) unsigned NOT NULL,
	TOPIC_CATEGORY_CODE varchar(5) NOT NULL COMMENT '本人確認書類設定/収納経路設定...などトピックのカテゴリーを定義',
	TOPIC_STATUS_CODE varchar(5) NOT NULL COMMENT '対応不要/未対応/CC確認待ち/対応済などトピックの対応要否と進行状況を管理',
	IS_DELETED boolean DEFAULT FALSE NOT NULL COMMENT '論理削除したかどうかを示すフラグ
TRUE: 論理削除済み
FALSE: 未削除',
	PRIMARY KEY (TOPIC_ID, TOPIC_CATEGORY_CODE)
);



/* Create Foreign Keys */

ALTER TABLE APPLY
	ADD FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNT (ACCOUNT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE AUTHENTICATION
	ADD FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNT (ACCOUNT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TOPIC
	ADD FOREIGN KEY (ACCOUNT_ID)
	REFERENCES ACCOUNT (ACCOUNT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PRODUCT_ADDITIONAL
	ADD FOREIGN KEY (APPLY_ID)
	REFERENCES APPLY (APPLY_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TOPIC
	ADD FOREIGN KEY (APPLY_ID)
	REFERENCES APPLY (APPLY_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE EXCLUSION
	ADD FOREIGN KEY (ASSESSMENT_ID)
	REFERENCES ASSESSMENT (ASSESSMENT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE AUTH_HASH
	ADD FOREIGN KEY (ACCOUNT_ID)
	REFERENCES AUTHENTICATION (ACCOUNT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PASSWORD
	ADD FOREIGN KEY (ACCOUNT_ID)
	REFERENCES AUTHENTICATION (ACCOUNT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE RIDER
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES BASE_POLICY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CODE_MASTER
	ADD FOREIGN KEY (PARENT_ID)
	REFERENCES CODE_MASTER (CODE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCOUNT
	ADD FOREIGN KEY (INDIVIDUAL_ID)
	REFERENCES INDIVIDUAL (INDIVIDUAL_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PRODUCT_ADDITIONAL
	ADD FOREIGN KEY (SELF_INDIVIDUAL_ID)
	REFERENCES INDIVIDUAL (INDIVIDUAL_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PRODUCT_ADDITIONAL
	ADD FOREIGN KEY (RECEIVER_INDIVIDUAL_ID)
	REFERENCES INDIVIDUAL (INDIVIDUAL_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TEL_NUM
	ADD FOREIGN KEY (INDIVIDUAL_ID)
	REFERENCES INDIVIDUAL (INDIVIDUAL_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FLAW
	ADD FOREIGN KEY (JUDGEMENT_ID)
	REFERENCES JUDGEMENT (JUDGEMENT_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE OPERATOR_AUTH_HASH
	ADD FOREIGN KEY (OPERATOR_ID)
	REFERENCES OPERATOR (OPERATOR_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE OPERATOR_PASSWORD
	ADD FOREIGN KEY (OPERATOR_ID)
	REFERENCES OPERATOR (OPERATOR_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ACCEPTANCE
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE ASSESSMENT
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BASE_POLICY
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE DOCUMENT
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE JUDGEMENT
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE PAYMENT
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TOPIC
	ADD FOREIGN KEY (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	REFERENCES PRODUCT_ADDITIONAL (PRODUCT_ADDITIONAL_ID, PRODUCT_ADDITIONAL_VERSION)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CONTACT
	ADD FOREIGN KEY (TOPIC_ID)
	REFERENCES TOPIC (TOPIC_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TOPIC_CATEGORY
	ADD FOREIGN KEY (TOPIC_ID)
	REFERENCES TOPIC (TOPIC_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



/* Create Indexes */

CREATE INDEX IDX_ACCEPTANCE_01 USING BTREE ON ACCEPTANCE (PRODUCT_ADDITIONAL_ID ASC, PRODUCT_ADDITIONAL_VERSION ASC, ACCEPTANCE_TARGET_CODE ASC, IS_DELETED ASC);
CREATE INDEX IDX_APPLY_01 USING BTREE ON APPLY (ACCOUNT_ID ASC);
CREATE INDEX IDX_AUTHENTICATION_01 USING BTREE ON AUTHENTICATION (ACCOUNT_ID ASC);
CREATE INDEX IDX_AUTHENTICATION_02 USING BTREE ON AUTHENTICATION (MAILADDRESS ASC);
CREATE INDEX IDX_AUTHENTICATION_03 USING BTREE ON AUTHENTICATION (EXT_AUTH_CODE ASC, EXT_AUTH_ID ASC);
CREATE INDEX IDX_AUTH_HASH_01 USING BTREE ON AUTH_HASH (HASH_CODE ASC, HASH_USAGE_CODE ASC, IS_DELETED ASC);
CREATE INDEX IDX_CODE_MASTER_01 USING BTREE ON CODE_MASTER (PARENT_ID ASC);
CREATE INDEX IDX_PASSWORD_01 USING BTREE ON PASSWORD (ACCOUNT_ID ASC, IS_DELETED ASC);
CREATE INDEX IDX_PAYMENT_01 USING BTREE ON PAYMENT (PRODUCT_ADDITIONAL_ID ASC, PRODUCT_ADDITIONAL_VERSION ASC, IS_DELETED ASC);
CREATE INDEX IDX_PLAN_FILE_01 USING BTREE ON PLAN_FILE (START_DATETIME ASC, END_DATETIME ASC, IS_DELETED ASC);
CREATE INDEX IDX_PRODUCT_ADDITIONAL_01 USING BTREE ON PRODUCT_ADDITIONAL (APPLY_ID ASC, IS_DELETED ASC);
CREATE INDEX IDX_PRODUCT_ADDITIONAL_02 ON PRODUCT_ADDITIONAL (SELF_INDIVIDUAL_ID ASC);
CREATE INDEX IDX_PRODUCT_ADDITIONAL_03 USING BTREE ON PRODUCT_ADDITIONAL (RECEIVER_INDIVIDUAL_ID ASC);
CREATE INDEX IDX_PRODUCT_ADDITIONAL_04 USING BTREE ON PRODUCT_ADDITIONAL (APPLY_ID ASC, PRODUCT_ADDITIONAL_VERSION ASC, IS_DELETED ASC);
CREATE INDEX IDX_RIDER_01 USING BTREE ON RIDER (PRODUCT_ADDITIONAL_ID ASC, PRODUCT_ADDITIONAL_VERSION ASC, IS_DELETED ASC);
CREATE INDEX IDX_TEL_NUM_01 USING BTREE ON TEL_NUM (INDIVIDUAL_ID ASC, IS_DELETED ASC);



